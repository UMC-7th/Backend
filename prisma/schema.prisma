// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  userId   Int      @id @default(autoincrement()) @map("user_id")
  email    String   @db.VarChar(100)
  password String   @db.VarChar(100)
  birth    DateTime @db.DateTime(6)
  name     String   @db.VarChar(100)
  nickname String   @default("") @db.VarChar(100)
  phoneNum String   @map("phone_num") @db.VarChar(100)
  purpose  String   @db.Text

  agreement       Agreement[]
  markMaterials   MarkMaterial[]
  EatMeal         EatMeal[]
  MealUser        MealUser[]
  KartSub         KartSub[]
  Subscribe       Subscribe[]
  DeliveryAddress DeliveryAddress[]

  @@map("user")
}

model DeliveryAddress {
  addressId Int     @id @default(autoincrement()) @map("address_id")
  userId    Int     @map("user_id")
  address   String  @db.VarChar(200)
  name      String  @db.VarChar(100)
  phoneNum  String  @map("phone_num") @db.VarChar(100)
  postNum   Int     @map("post_num")
  memo      String  @db.Text
  isDefault Boolean @default(false) @map("is_default")

  user User @relation(fields: [userId], references: [userId])

  @@map("delivery_address")
}

model MealUser {
  mealUserId Int      @id @default(autoincrement()) @map("meal_user_id")
  userId     Int      @map("user_id")
  mealId     Int      @map("meal_id")
  time       String   @db.VarChar(100)
  mealDate   DateTime @map("meal_date") @db.DateTime(6)
  isMark     Boolean  @default(false) @map("is_mark")
  isLike     Boolean  @default(false) @map("is_like")

  user User @relation(fields: [userId], references: [userId])
  meal Meal @relation(fields: [mealId], references: [mealId])

  @@map("meal_user")
}

model Meal {
  mealId        Int    @id @default(autoincrement()) @map("meal_id")
  food          String @db.VarChar(200)
  calorieTotal  Int    @map("calorie_total")
  material      String @db.VarChar(200)
  calorieDetail String @map("calorie_detail") @db.VarChar(200)
  price         Int
  difficulty    String @db.VarChar(100)
  recipe        String @db.Text
  addedByUser     Boolean  @default(false) @map("added_by_user")

  mealSubs MealSub[]
  EatMeal  EatMeal[]
  MealUser MealUser[]

  @@map("meal")
}

model MarkMaterial {
  markId   Int    @id @default(autoincrement()) @map("mark_id")
  userId   Int    @map("user_id")
  material String @db.VarChar(100)

  user User @relation(fields: [userId], references: [userId])

  @@map("mark_material")
}

model Agreement {
  agreeId        Int     @id @default(autoincrement()) @map("agree_id")
  userId         Int     @map("user_id")
  agreeMarketing Boolean @map("agree_marketing")
  agreePInfo     Boolean @map("agree_p_info")

  user User @relation(fields: [userId], references: [userId])

  @@map("agreement")
}

model Subscribe {
  subId     Int    @id @default(autoincrement()) @map("sub_id")
  userId    Int    @map("user_id")
  mealSubId Int    @map("meal_sub_id")
  review    String @db.Text
  score     Int

  user    User    @relation(fields: [userId], references: [userId])
  mealSub MealSub @relation(fields: [mealSubId], references: [mealSubId])

  @@map("subscribe")
}

model KartSub {
  kardId    Int @id @default(autoincrement()) @map("kard_id")
  userId    Int @map("user_id")
  mealSubId Int @map("meal_sub_id")
  cnt       Int

  user    User    @relation(fields: [userId], references: [userId])
  mealSub MealSub @relation(fields: [mealSubId], references: [mealSubId])

  @@map("kart_sub")
}

model MealSub {
  mealSubId  Int      @id @default(autoincrement()) @map("meal_sub_id")
  mealId     Int      @map("meal_id")
  categoryId Int      @map("category_id")
  time       String   @db.VarChar(100)
  mealDate   DateTime @map("meal_date") @db.DateTime(6)

  meal      Meal            @relation(fields: [mealId], references: [mealId])
  category  MealSubCategory @relation(fields: [categoryId], references: [categoryId])
  KartSub   KartSub[]
  Subscribe Subscribe[]

  @@map("meal_sub")
}

model EatMeal {
  eatId  Int      @id @default(autoincrement()) @map("eat_id")
  userId Int      @map("user_id")
  mealId Int      @map("meal_id")
  eatAt  DateTime @map("eat_at") @db.DateTime(6)

  user User @relation(fields: [userId], references: [userId])
  meal Meal @relation(fields: [mealId], references: [mealId])

  @@map("eat_meal")
}

model MealSubCategory {
  categoryId Int    @id @default(autoincrement()) @map("category_id")
  name       String @db.VarChar(100)

  mealSubs MealSub[]

  @@map("meal_sub_category")
}

model ImageFood {
  imageId  Int      @id @default(autoincrement()) @map("image_id")
  name     String   @db.VarChar(100)
  imageUrl String   @map("image_url") @db.Text
  searchAt DateTime @default(now()) @map("search_at") @db.DateTime(6)

  @@map("image_food")
}

model HotMaterial {
  hotId    Int    @id @default(autoincrement()) @map("hot_id")
  text     String @db.Text
  material String @db.VarChar(100)

  @@map("hot_material")
}